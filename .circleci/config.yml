# Define YAML anchors
load_docker_image: &load_docker_image
  run:
    name: Load Docker image layer cache
    command: |
      docker load -i "/home/circleci/workspace/caches/${CIRCLE_PROJECT_REPONAME}-ci.tar" || true
attach_workspace: &attach_workspace
  attach_workspace:
    at: /home/circleci/workspace/

version: 2.1
orbs:
  anchore: anchore/anchore-engine@dev:latest
commands:
  pull_test_image:
    description: pull image and save as docker archive
    parameters:
      image_names:
        description: can pass a bash array
        type: string
    steps:
    - run:
        name: Pull & Save test images
        command: |
          mkdir -p ~/images
          img_array=<< parameters.image_names >>
          for i in "${img_array[@]}"; do
            docker pull "$i"
            img=$(echo "${i##*/}" | sed 's/:/+/g' )
            docker save "$i" -o ~/images/"${img}".tar
          done

jobs:
  local_image_scan:
    docker:
      - image: docker:stable-git
    steps:
    - setup_remote_docker
    - checkout
    - run:
        name: build container
        command: docker build -t "${CIRCLE_PROJECT_REPONAME}:ci" -f .circleci/Dockerfile .
    - anchore/analyze_local_image:
        image_name: "${CIRCLE_PROJECT_REPONAME}:ci"
        dockerfile_path: .circleci/Dockerfile
        policy_bundle_file_path: ""
    - anchore/parse_reports

  custom_policy_fail:
    docker:
      - image: docker:stable-git
    steps:
    - setup_remote_docker
    - checkout
    - run:
        name: build container
        command: docker build -t "${CIRCLE_PROJECT_REPONAME}:policy_fail" -f .circleci/node_critical_fail/Dockerfile .circleci/node_critical_fail/
    - anchore/analyze_local_image:
        image_name: "${CIRCLE_PROJECT_REPONAME}:policy_fail"
        policy_failure: True
        dockerfile_path: .circleci/node_critical_fail/Dockerfile
        policy_bundle_file_path: .circleci/.anchore/policy_bundle.json
    - anchore/parse_reports

  custom_policy_pass:
    docker:
      - image: docker:stable-git
    steps:
    - setup_remote_docker
    - checkout
    - run:
        name: build container
        command: docker build -t "${CIRCLE_PROJECT_REPONAME}:policy_pass" -f .circleci/node_critical_pass/Dockerfile .circleci/node_critical_pass/
    - anchore/analyze_local_image:
        image_name: "${CIRCLE_PROJECT_REPONAME}:policy_pass"
        policy_failure: True
        dockerfile_path: .circleci/node_critical_pass/Dockerfile
        policy_bundle_file_path: .circleci/.anchore/policy_bundle.json
    - anchore/parse_reports

  publish_dev_orb:
    docker:
    - image: circleci/circleci-cli:latest
    steps:
    - checkout
    - run:
        name: Validate orb
        command: circleci orb validate circleci-orbs/anchore-engine/orb.yml --token "$CIRCLECI_TOKEN"
    - run:
        name: Publish dev orb
        command: circleci orb publish circleci-orbs/anchore-engine/orb.yml anchore/anchore-engine@dev:latest --token "$CIRCLECI_TOKEN"

  build_stateless_image:
    machine: true
    steps:
    - checkout
    - run:
        name: Build image
        command: |
          git clone git@github.com:anchore/anchore-engine.git
          pushd anchore-engine
          export ANCHORE_VERSION=$(git describe --tag --abbrev=0 --exclude "*rc*")
          popd
          rm -rf anchore-engine
          echo "ANCHORE_VERSION=$ANCHORE_VERSION" | tee >(sed 's/.*=//' > anchore_version.txt) | cat
          export CI_TOOLS_VERSION=$(git describe --tag --abbrev=0 --exclude "*rc*")
          echo "CI_TOOLS_VERSION=$CI_TOOLS_VERSION" | tee >(sed 's/.*=//' > ci_tools_version.txt) | cat
          scripts/build_image.sh
    - pull_test_image:
        image_names: "('alpine:latest' 'java:latest' 'nginx:latest')"
    - run:
        name: Test stateless container
        command: |
          export ANCHORE_CI_IMAGE="${IMAGE_NAME}:ci"
          bash -x scripts/inline_scan -v ~/images -t 500
    - run:
        name: Test script
        command: |
          export ANCHORE_CI_IMAGE="${IMAGE_NAME}:ci"
          curl -s "https://raw.githubusercontent.com/anchore/ci-tools/${CIRCLE_BRANCH}/scripts/inline_scan" | bash -xs -- -d ".circleci/Dockerfile" -b ".circleci/.anchore/policy_bundle.json" -p -r node
    - run:
        name: Push to Dockerhub
        command: |
          echo "${IMAGE_NAME}:${IMAGE_TAG}"
          echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
          docker tag "${IMAGE_NAME}:ci" "${IMAGE_NAME}:${IMAGE_TAG}"
          docker push "${IMAGE_NAME}:${IMAGE_TAG}"
    - run:
        name: Setup workspace cache
        command: |
          rm -rf /home/circleci/workspace/caches/
          mkdir -p /home/circleci/workspace/caches/
          cp anchore_version.txt /home/circleci/workspace/caches/
          cp ci_tools_version.txt /home/circleci/workspace/caches/
          docker save -o "/home/circleci/workspace/caches/${CIRCLE_PROJECT_REPONAME}-ci.tar" "${IMAGE_NAME}:ci"
    - persist_to_workspace:
        root: /home/circleci/workspace/
        paths:
          - caches/*

  test_inline_script:
    docker:
      - image: docker:stable
    steps:
    - setup_remote_docker
    - checkout
    - run:
        name: Install dependencies
        command: apk add curl bash
    - run:
        name: test script
        command: |
          export ANCHORE_CI_IMAGE="${IMAGE_NAME}:dev"
          curl -s "https://raw.githubusercontent.com/anchore/ci-tools/${CIRCLE_BRANCH}/scripts/inline_scan" | bash -s -- -p centos:latest
    - run:
        name: test script with dockerfile
        command: |
          export ANCHORE_CI_IMAGE="${IMAGE_NAME}:dev"
          docker pull docker:stable-git
          curl -s "https://raw.githubusercontent.com/anchore/ci-tools/${CIRCLE_BRANCH}/scripts/inline_scan" | bash -s -- -d ".circleci/Dockerfile" docker:stable-git
    - run:
        name: test script with policy bundle
        command: |
          export ANCHORE_CI_IMAGE="${IMAGE_NAME}:dev"
          curl -s "https://raw.githubusercontent.com/anchore/ci-tools/${CIRCLE_BRANCH}/scripts/inline_scan" | bash -s -- -p -b ".circleci/.anchore/policy_bundle.json" 'anchore/inline-scan:dev' 
    - run:
        name: test script with policy bundle & dockerfile
        command: |
          export ANCHORE_CI_IMAGE="${IMAGE_NAME}:dev"
          cd .circleci/node_critical_pass/
          docker build -t example.com:5000/ci-test_1/node_critical-pass:latest .
          cd -
          curl -s "https://raw.githubusercontent.com/anchore/ci-tools/${CIRCLE_BRANCH}/scripts/inline_scan" | bash -s -- -t 500 -d ".circleci/node_critical_pass/Dockerfile" -b ".circleci/.anchore/policy_bundle.json" example.com:5000/ci-test_1/node_critical-pass
    
  push_stateless_latest:
    docker:
      - image: docker:stable
    steps:
    - setup_remote_docker
    - <<: *attach_workspace
    - <<: *load_docker_image
    - run:
        name: Push 'latest' tag
        command: | 
          if [[ "$CIRCLE_BRANCH" = 'master' ]]; then
            echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
            CI_TOOLS_VERSION=$(cat /home/circleci/workspace/caches/ci_tools_version.txt)
            docker tag "${IMAGE_NAME}:ci" "${IMAGE_NAME}:${CI_TOOLS_VERSION}"
            docker tag "${IMAGE_NAME}:ci" "${IMAGE_NAME}:latest"
            docker push "${IMAGE_NAME}:latest"
            docker push "${IMAGE_NAME}:${CI_TOOLS_VERSION}"
          else
            echo "Only push lastest & $CI_TOOLS_VERSION tags on master."
          fi

  nightly_build_stateless_image:
    machine: true 
    steps:
    - checkout
    - run:
        name: Build image
        command: |
          git clone git@github.com:anchore/anchore-engine.git
          pushd anchore-engine
          export ANCHORE_VERSION=$(git describe --tag --abbrev=0 --exclude "*rc*")
          popd
          rm -rf anchore-engine
          echo "ANCHORE_VERSION=$ANCHORE_VERSION" | tee >(sed 's/.*=//' > anchore_version.txt) | cat
          export CI_TOOLS_VERSION=$(git describe --tag --abbrev=0 --exclude "*rc*")
          echo "CI_TOOLS_VERSION=$CI_TOOLS_VERSION" | tee >(sed 's/.*=//' > ci_tools_version.txt) | cat
          git checkout "$CI_TOOLS_VERSION"
          scripts/build_image.sh
    - pull_test_image:
        image_names: "('alpine:latest' 'java:latest' 'anchore/inline-scan:latest' 'centos:latest' 'nginx:latest')"
    - run:
        name: Test stateless container
        command: |
          export ANCHORE_CI_IMAGE="${IMAGE_NAME}:ci"
          bash -x scripts/inline_scan -v ~/images -t 500
    - run:
        name: Test script
        command: |
          export ANCHORE_CI_IMAGE="${IMAGE_NAME}:ci"
          export CI_TOOLS_VERSION=$(cat ci_tools_version.txt)
          curl -s "https://raw.githubusercontent.com/anchore/ci-tools/${CI_TOOLS_VERSION}/scripts/inline_scan" | bash -xs -- -d ".circleci/Dockerfile" -b ".circleci/.anchore/policy_bundle.json" -p -r node
    - run:
        name: Setup workspace cache
        command: |
          rm -rf /home/circleci/workspace/caches/
          mkdir -p /home/circleci/workspace/caches/
          cp anchore_version.txt /home/circleci/workspace/caches/
          cp ci_tools_version.txt /home/circleci/workspace/caches/
          docker save -o "/home/circleci/workspace/caches/${CIRCLE_PROJECT_REPONAME}-ci.tar" "${IMAGE_NAME}:ci"
    - persist_to_workspace:
        root: /home/circleci/workspace/
        paths:
          - caches/*

workflows:
  scan_image:
    jobs:
    - build_stateless_image:
        context: dockerhub
        filters:
          tags:
            only: /^v.*/
    - test_inline_script:
        requires:
          - build_stateless_image
        filters:
          tags:
            only: /^v.*/
    - push_stateless_latest:
        requires:
          - test_inline_script
        filters:
          tags:
            only: /^v.*/
          branches:
            ignore: /.*/
    - custom_policy_pass
    - local_image_scan:
        requires:
          - custom_policy_pass
    - anchore/image_scan:
        requires:
          - local_image_scan
        image_name: 'gcr.io/testing-214322/alpine-test'
        private_registry: true
        registry_name: gcr.io
        registry_user: "_json_key"
        registry_pass: "$_gcr_json_key"
    - anchore/image_scan:
        requires:
          - local_image_scan
        image_name: 'anchore/anchore-engine:latest'
        policy_bundle_file_path: ""
    - anchore/image_scan:
        requires:
          - local_image_scan
        context: dockerhub
        image_name: 'anchore/private_testing:anchore-ui-dev'
        private_registry: True
        timeout: '500'
  
  nightly_build:
    triggers:
      - schedule:
          cron: "0 16 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
    - nightly_build_stateless_image:
        context: dockerhub
    - push_stateless_latest:
        context: dockerhub
        requires:
          - nightly_build_stateless_image