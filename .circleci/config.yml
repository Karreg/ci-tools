# Define YAML anchors

# load_docker_images step requires code checkout prior to running
load_docker_images: &load_docker_images
  run:
    name: Load Docker image layer cache
    command: |
      cp -f .circleci/build_versions.txt /home/circleci/workspace/build_versions.txt
      # TEST NIGHTLY BUILD - REMOVE BEFORE MERGING
      export NIGHTLY_BUILD=true
      if [[ "$NIGHTLY_BUILD" = "true" ]]; then
          for version in $(cat /home/circleci/workspace/build_versions.txt); do
              docker load -i "/home/circleci/workspace/caches/${CIRCLE_PROJECT_REPONAME}-${version}-dev.tar"
          done
      else
          docker load -i "/home/circleci/workspace/caches/${CIRCLE_PROJECT_REPONAME}-dev.tar"
      fi
      cd -
attach_workspace: &attach_workspace
  attach_workspace:
    at: /home/circleci/workspace/

version: 2.1
orbs:
  anchore: anchore/anchore-engine@dev:latest
jobs:
  local_image_scan:
    executor: anchore/anchore_engine
    steps:
    - setup_remote_docker
    - checkout
    - run:
        name: build container
        command: docker build -t "${CIRCLE_PROJECT_REPONAME}:ci" -f .circleci/Dockerfile .
    - anchore/analyze_local_image:
        image_name: ${CIRCLE_PROJECT_REPONAME}:ci
        dockerfile_path: .circleci/Dockerfile
    - anchore/parse_reports
    - store_artifacts:
        path: anchore-reports

  local_images_scan:
    executor: anchore/anchore_engine
    steps:
    - setup_remote_docker
    - checkout
    - run:
        name: build container
        command: |
          docker build -t "${CIRCLE_PROJECT_REPONAME}:ci" -f .circleci/Dockerfile .
          docker build -t "${CIRCLE_PROJECT_REPONAME}:pass" -f .circleci/node_critical_pass/Dockerfile .circleci/node_critical_pass/
          docker build -t "${CIRCLE_PROJECT_REPONAME}:fail" -f .circleci/node_critical_fail/Dockerfile .circleci/node_critical_fail/
    - anchore/analyze_local_image:
        image_name: "${CIRCLE_PROJECT_REPONAME}:ci ${CIRCLE_PROJECT_REPONAME}:pass ${CIRCLE_PROJECT_REPONAME}:fail"
    - anchore/parse_reports
    - store_artifacts:
        path: anchore-reports

  custom_policy_fail:
    executor: anchore/anchore_engine
    steps:
    - setup_remote_docker
    - checkout
    - run:
        name: build container
        command: docker build -t "${CIRCLE_PROJECT_REPONAME}:policy_fail" -f .circleci/node_critical_fail/Dockerfile .circleci/node_critical_fail/
    - anchore/analyze_local_image:
        image_name: ${CIRCLE_PROJECT_REPONAME}:policy_fail
        policy_failure: True
        dockerfile_path: .circleci/node_critical_fail/Dockerfile
        policy_bundle_file_path: .circleci/.anchore/policy_bundle.json
    - anchore/parse_reports
    - store_artifacts:
        path: anchore-reports

  custom_policy_pass:
    executor: anchore/anchore_engine
    steps:
    - setup_remote_docker
    - checkout
    - run:
        name: build container
        command: docker build -t "${CIRCLE_PROJECT_REPONAME}:policy_pass" -f .circleci/node_critical_pass/Dockerfile .circleci/node_critical_pass/
    - anchore/analyze_local_image:
        image_name: ${CIRCLE_PROJECT_REPONAME}:policy_pass
        policy_failure: True
        dockerfile_path: .circleci/node_critical_pass/Dockerfile
        policy_bundle_file_path: .circleci/.anchore/policy_bundle.json
    - anchore/parse_reports
    - store_artifacts:
        path: anchore-reports

  publish_dev_orb:
    docker:
    - image: circleci/circleci-cli:latest
    steps:
    - checkout
    - run:
        name: Validate orb
        command: circleci orb validate circleci-orbs/anchore-engine/orb.yml --token "$CIRCLECI_TOKEN"
    - run:
        name: Publish dev orb
        command: circleci orb publish circleci-orbs/anchore-engine/orb.yml anchore/anchore-engine@dev:latest --token "$CIRCLECI_TOKEN"

  build_stateless_image:
    parameters:
      anchore_version: 
        default: ""
        type: string
    docker:
      - image: circleci/python:3.6
    steps:
    - setup_remote_docker
    - checkout
    - run:
        name: Build and Save Images
        command: ./build.sh build_and_save_images << parameters.anchore_version >>
    - persist_to_workspace:
        root: /home/circleci/workspace/
        paths:
          - caches/*
          - versions.txt

  test_inline_script:
    docker:
      - image: circleci/python:3.6
    steps:
    - setup_remote_docker
    - checkout
    - <<: *attach_workspace
    - run:
        name: Test Inline Script
        command: ./build.sh run_inline_tests

  push_dockerhub:
    parameters:
      anchore_version: 
        default: ""
        type: string
    docker:
      - image: circleci/python:3.6
    steps:
    - setup_remote_docker
    - checkout
    - <<: *attach_workspace
    - <<: *load_docker_images
    - run:
        name: Load & Push Image to DockerHub
        command: ./build.sh load_image_and_push_dockerhub << parameters.anchore_version >>

workflows:
  default_workflow:
    jobs:
    - build_stateless_image_dev:
        anchore_version: dev
    - push_dockerhub_dev:
        anchore_version: dev
        context: dockerhub
        requires:
          - test_inline_script_dev
    - build_stateless_image:
        filters:
          # ignore any commit on any branch by default
          branches:
            ignore: /.*/
          # only act on version tags
          tags:
            only: /^v[0-9]+(\.[0-9]+)*$/
    - test_inline_script:
        requires:
          - build_stateless_image
        filters:
          branches:
            ignore: /.*/
          tags:
            only: /^v[0-9]+(\.[0-9]+)*$/
    - push_dockerhub:
        context: dockerhub
        requires:
          - test_inline_script
        filters:
          branches:
            ignore: /.*/
          tags:
            only: /^v[0-9]+(\.[0-9]+)*$/

  test_orb:
    triggers:
      - schedule:
          cron: "0 14 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
    - local_image_scan
    - custom_policy_pass:
        requires:
          - local_image_scan
    - local_images_scan:
        requires:
          - custom_policy_pass
    - anchore/image_scan:
        name: scan_private_image
        image_name: gcr.io/testing-214322/alpine-test
        private_registry: true
        registry_name: gcr.io
        registry_user: _json_key
        registry_pass: $_gcr_json_key
    - anchore/image_scan:
        requires:
          - scan_private_image
        image_name: anchore/anchore-engine:latest
        policy_bundle_file_path: ''
    - anchore/image_scan:
        requires:
          - scan_private_image
        context: dockerhub
        image_name: anchore/private_testing:anchore-ui-dev
        private_registry: True
        timeout: '500'

  nightly_build_image:
    triggers:
      - schedule:
          cron: "0 12 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
    - build_stateless_image
    - test_inline_script:
        requires:
          - build_stateless_image
    - push_dockerhub:
        context: dockerhub
        requires:
          - test_inline_script