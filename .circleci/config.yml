# Define YAML anchors
attach_workspace: &attach_workspace
  attach_workspace:
    at: /home/circleci/workspace/

filter_dev_orb_integration: &filter_dev_orb_integration
  branches:
    ignore: /.*/
  tags:
    only: /integration-.*/

filter_dev_orb_branch: &filter_dev_orb_branch
  branches:
    only: /orb.*/

filter_semver_tags: &filter_semver_tags
  branches:
    ignore: /.*/
  tags:
    only: /^v[0-9]+(\.[0-9]+)*$/


# Start of CircleCI Configuration
version: 2.1
orbs:
  anchore: anchore/anchore-engine@dev:alpha
  orb-tools: circleci/orb-tools@8.5.0

jobs:
  local_image_scan:
    executor: anchore/anchore_engine
    steps:
    - setup_remote_docker
    - checkout
    - run:
        name: build container
        command: docker build -t "${CIRCLE_PROJECT_REPONAME}:ci" -f .circleci/Dockerfile .
    - anchore/analyze_local_image:
        image_name: ${CIRCLE_PROJECT_REPONAME}:ci
        dockerfile_path: .circleci/Dockerfile
    - anchore/parse_reports
    - store_artifacts:
        path: anchore-reports

  local_images_scan:
    executor: anchore/anchore_engine
    steps:
    - setup_remote_docker
    - checkout
    - run:
        name: build container
        command: |
          docker build -t "${CIRCLE_PROJECT_REPONAME}:ci" -f .circleci/Dockerfile .
          docker build -t "${CIRCLE_PROJECT_REPONAME}:pass" -f .circleci/node_critical_pass/Dockerfile .circleci/node_critical_pass/
          docker build -t "${CIRCLE_PROJECT_REPONAME}:fail" -f .circleci/node_critical_fail/Dockerfile .circleci/node_critical_fail/
    - anchore/analyze_local_image:
        image_name: "${CIRCLE_PROJECT_REPONAME}:ci ${CIRCLE_PROJECT_REPONAME}:pass ${CIRCLE_PROJECT_REPONAME}:fail"
    - anchore/parse_reports
    - store_artifacts:
        path: anchore-reports

  custom_policy_fail:
    executor: anchore/anchore_engine
    steps:
    - setup_remote_docker
    - checkout
    - run:
        name: build container
        command: docker build -t "${CIRCLE_PROJECT_REPONAME}:policy_fail" -f .circleci/node_critical_fail/Dockerfile .circleci/node_critical_fail/
    - anchore/analyze_local_image:
        image_name: ${CIRCLE_PROJECT_REPONAME}:policy_fail
        policy_failure: True
        dockerfile_path: .circleci/node_critical_fail/Dockerfile
        policy_bundle_file_path: .circleci/.anchore/policy_bundle.json
    - anchore/parse_reports
    - store_artifacts:
        path: anchore-reports

  custom_policy_pass:
    executor: anchore/anchore_engine
    steps:
    - setup_remote_docker
    - checkout
    - run:
        name: build container
        command: docker build -t "${CIRCLE_PROJECT_REPONAME}:policy_pass" -f .circleci/node_critical_pass/Dockerfile .circleci/node_critical_pass/
    - anchore/analyze_local_image:
        image_name: ${CIRCLE_PROJECT_REPONAME}:policy_pass
        policy_failure: True
        dockerfile_path: .circleci/node_critical_pass/Dockerfile
        policy_bundle_file_path: .circleci/.anchore/policy_bundle.json
    - anchore/parse_reports
    - store_artifacts:
        path: anchore-reports

  build_inline_image:
    parameters:
      anchore_version: 
        default: ""
        type: string
    docker:
      - image: circleci/python:3.6
    steps:
    - setup_remote_docker
    - checkout
    - run:
        name: Build and Save Images
        command: scripts/build.sh build_and_save_images << parameters.anchore_version >>
        no_output_timeout: 30m
    - persist_to_workspace:
        root: /home/circleci/workspace/
        paths:
          - caches/*

  test_inline_script:
    parameters:
      anchore_version: 
        default: ""
        type: string
    docker:
      - image: circleci/python:3.6
    steps:
    - setup_remote_docker
    - checkout
    - <<: *attach_workspace
    - run:
        name: Test Inline Script
        command: scripts/build.sh test_built_images << parameters.anchore_version >>
        no_output_timeout: 30m

  push_dockerhub:
    parameters:
      anchore_version: 
        default: ""
        type: string
    docker:
      - image: circleci/python:3.6
    steps:
    - setup_remote_docker
    - checkout
    - <<: *attach_workspace
    - run:
        name: Load & Push Image to DockerHub
        command: scripts/build.sh load_image_and_push_dockerhub << parameters.anchore_version >>
        no_output_timeout: 30m

  build_test_push_inline_slim_v051:
    docker:
      - image: circleci/python:3.6
    steps:
    - setup_remote_docker
    - checkout
    - run:
        name: Build and Save Images
        command: IMAGE_REPO=docker.io/anchore/inline-scan-slim scripts/build.sh -s build_and_save_images v0.5.1
        no_output_timeout: 30m
    - run:
        name: Test Inline Script
        command: IMAGE_REPO=docker.io/anchore/inline-scan-slim scripts/build.sh -s test_built_images v0.5.1
        no_output_timeout: 30m
    - run:
        name: Load & Push Image to DockerHub
        command: IMAGE_REPO=docker.io/anchore/inline-scan-slim scripts/build.sh -s load_image_and_push_dockerhub v0.5.1
        no_output_timeout: 30m

  build_test_push_inline_slim_v052:
    docker:
      - image: circleci/python:3.6
    steps:
    - setup_remote_docker
    - checkout
    - run:
        name: Build and Save Images
        command: IMAGE_REPO=docker.io/anchore/inline-scan-slim scripts/build.sh -s build_and_save_images v0.5.2
        no_output_timeout: 30m
    - run:
        name: Test Inline Script
        command: IMAGE_REPO=docker.io/anchore/inline-scan-slim scripts/build.sh -s test_built_images v0.5.2
        no_output_timeout: 30m
    - run:
        name: Load & Push Image to DockerHub
        command: IMAGE_REPO=docker.io/anchore/inline-scan-slim scripts/build.sh -s load_image_and_push_dockerhub v0.5.2
        no_output_timeout: 30m

workflows:
  default_workflow:
    jobs:
    - build_inline_image:
        name: build_stateless_dev
        anchore_version: dev
        filters:
          branches:
            ignore: /orb.*/
    - test_inline_script:
        name: test_inline_dev
        anchore_version: dev
        requires:
          - build_stateless_dev
    - push_dockerhub:
        name: push_stateless_dev
        anchore_version: dev
        context: dockerhub
        requires:
          - test_inline_dev
    - build_inline_image:
        name: build_inline_all_versions
        anchore_version: all
        filters: *filter_semver_tags
    - test_inline_script:
        name: test_inline_all
        anchore_version: all
        requires:
          - build_inline_all_versions
        filters: *filter_semver_tags
    - push_dockerhub:
        name: push_stateless_all
        anchore_version: all
        context: dockerhub
        requires:
          - test_inline_all
        filters: *filter_semver_tags
    - build_test_push_inline_slim_v051:
        context: dockerhub
        requires:
          - push_stateless_all
        filters: *filter_semver_tags
    - build_test_push_inline_slim_v052:
        context: dockerhub
        requires:
          - push_stateless_all
        filters: *filter_semver_tags

  lint_publish_dev_orb:
    jobs:
      - orb-tools/lint:
          lint-dir: circleci-orbs/anchore-engine/src/
          filters: *filter_dev_orb_branch
      - orb-tools/pack:
          source-dir: circleci-orbs/anchore-engine/src/
          requires:
            - orb-tools/lint
          filters: *filter_dev_orb_branch
      - orb-tools/publish-dev:
          context: publish_dev_orb
          orb-name: anchore/anchore-engine
          requires:
            - orb-tools/pack
          filters: *filter_dev_orb_branch
      - orb-tools/trigger-integration-workflow:
          name: trigger-integration-dev
          context: publish_dev_orb
          cleanup-tags: true
          ssh-fingerprints: d3:90:de:4e:fb:1f:ab:6d:77:2a:c5:6c:08:87:9b:c0
          requires:
            - orb-tools/publish-dev
          filters: *filter_dev_orb_branch

  test_dev_orb:
    jobs:
    - local_image_scan:
        filters: *filter_dev_orb_integration
    - custom_policy_pass:
        requires:
          - local_image_scan
        filters: *filter_dev_orb_integration
    - local_images_scan:
        requires:
          - custom_policy_pass
        filters: *filter_dev_orb_integration
    - anchore/image_scan:
        name: scan_private_image
        image_name: gcr.io/testing-214322/alpine-test
        private_registry: true
        registry_name: gcr.io
        registry_user: _json_key
        registry_pass: $_gcr_json_key
        filters: *filter_dev_orb_integration
    - anchore/image_scan:
        image_name: anchore/anchore-engine:latest
        policy_bundle_file_path: ''
        timeout: '1200'
        requires:
          - scan_private_image
        filters: *filter_dev_orb_integration
    - anchore/image_scan:
        context: dockerhub
        image_name: anchore/private_testing:anchore-ui-dev
        private_registry: True
        timeout: '500'
        requires:
          - scan_private_image
        filters: *filter_dev_orb_integration

  nightly_build_image:
    triggers:
      - schedule:
          cron: "0 12 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
    - build_test_push_inline_slim_v051:
        context: dockerhub
    - build_test_push_inline_slim_v052:
        context: dockerhub
    - build_inline_image:
        name: build_inline_nightly
        anchore_version: all
    - test_inline_script:
        name: test_inline_nightly
        anchore_version: all
        requires:
          - build_inline_nightly
    - push_dockerhub:
        name: push_inline_nightly
        anchore_version: all
        context: dockerhub
        requires:
          - test_inline_nightly