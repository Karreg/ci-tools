version: 2.1
description: |
  Anchore Engine is a docker container static analysis and policy-based compliance tool that
  automates the inspection, analysis, and evaluation of images to allow high confidence in
  container deployments by ensuring workload content meets the required criteria.
  Anchore Engine Project - https://github.com/anchore/anchore-engine
  Orb source code - https://github.com/anchore/ci-tools/blob/master/circleci-orbs/anchore-engine/orb.yml

examples:
  standard_image_scan:
    description: |
      Use this job to scan an image located in a public registry. A custom
      policy can be used for evaluation, add custom Anchore policy bundle to
      .circleci/.anchore/policy_bundle.json in your repository.
    usage:
      version: 2.1
      orbs:
        anchore: anchore/anchore-engine@1.3.0
      workflows:
        scan_image:
          jobs:
            - anchore/image_scan:
                image_name: docker.io/anchore/anchore-engine:latest
                timeout: '300'

  private_image_scan:
    description: |
      Use this job to scan an image located in a private registry. A custom
      policy can be used for evaluation, add custom Anchore policy bundle to
      .circleci/.anchore/policy_bundle.json in your repository.
    usage:
      version: 2.1
      orbs:
        anchore: anchore/anchore-engine@1.3.0
      workflows:
        scan_image:
          jobs:
            - anchore/image_scan:
                image_name: docker.io/anchore/anchore-engine:latest
                private_registry: True
                registry_name: docker.io
                registry_user: "${DOCKER_USER}"
                registry_pass: "${DOCKER_PASS}"

  local_image_scan:
    description: |
      Use the analyze_local_image command within a container build pipeline,
      it can be used to scan an image that hasn't been pushed to a registry yet.
      If Anchore policy evaluation gives 'fail' status, the CI job will be marked
      as a failure. A custom policy can be used for evaluation, add custom Anchore
      policy bundle to .circleci/.anchore/policy_bundle.json in your repository.
    usage:
      version: 2.1
      orbs:
        anchore: anchore/anchore-engine@1.3.0
      jobs:
        local_image_scan:
          docker:
            - image: docker:stable-git
          steps:
            - setup_remote_docker
            - checkout
            - run:
                name: build container
                command: docker build -t "example/test:latest" .
            - anchore/analyze_local_image:
                image_name: example/test:latest
                timeout: '500'
                policy_failure: True
                policy_bundle_file_path: .circleci/.anchore/policy_bundle.json
                dockerfile_path: ./Dockerfile
            - anchore/parse_reports
            - store_artifacts:
                path: anchore-reports

  local_multiple_image_scan:
    description: |
      Use the analyze_local_image command within a container build pipeline,
      it can be used to scan multiple images that haven't been pushed to a registry yet.
      If Anchore policy evaluation gives 'fail' status, the CI job will be marked
      as a failure. A custom policy can be used for evaluation, add custom Anchore
      policy bundle to .circleci/.anchore/policy_bundle.json in your repository. Scanning multiple
      images does not support passing a dockerfile.
    usage:
      version: 2.1
      orbs:
        anchore: anchore/anchore-engine@1.3.0
      jobs:
        local_image_scan:
          docker:
            - image: docker:stable-git
          steps:
            - setup_remote_docker
            - checkout
            - run:
                name: build containers
                command: |
                  docker build -t "example/test:dev" dev/
                  docker build -t "example/test:staging" staging/
                  docker build -t "example/test:latest" prod/
            - anchore/analyze_local_image:
                image_name: "example/test:dev example/test:staging example/test:latest"
                timeout: '500'
                policy_failure: True
                policy_bundle_file_path: .circleci/.anchore/policy_bundle.json
            - anchore/parse_reports
            - store_artifacts:
                path: anchore-reports

executors:
  anchore_engine:
    description: |
      CircleCi python 3.6 image with anchore engine default environment variables set.
      Anchore inline-scan image running as a docker service.
    environment:
      ANCHORE_CLI_USER: admin
      ANCHORE_CLI_PASS: foobar
      ANCHORE_CLI_URL: 'http://anchore-engine:8228/v1/'
      ANCHORE_CLI_SSL_VERIFY: 'n'
      ANCHORE_VERSION: v0.3.3
    docker:
      - image: circleci/python:3.6

commands:
  add_private_registry:
    description: |
      Adds credentials for private registries to anchore engine.
      Set registry credentials with $DOCKER_USER & $DOCKER_PASS env vars.
      Must run on executor with anchore-engine running & anchore-cli installed.
    parameters:
      registry_name:
        description: Name of private registry (eg - docker.io).
        type: string
        default: "docker.io"
      registry_user:
        description: Username for private registry (use env var to populate).
        type: string
        default: "${DOCKER_USER}"
      registry_pass:
        description: Password for private registry (use env var to populate).
        type: string
        default: "${DOCKER_PASS}"
    steps:
      - run:
          name: Add private registry credentials to anchore engine.
          command: docker exec -it anchore-engine anchore-cli registry add << parameters.registry_name >> "<< parameters.registry_user >>" "<< parameters.registry_pass >>" --skip-validate

  analyze_local_image:
    description: |
      Pushes a local image to a temporary registry container.
      Image is then scanned with anchore engine. Stores all reports as artifacts.
      Must be run in job with setup_remote_docker & using an image with docker installed.
    parameters:
      anchore_version:
        description: Version of anchore inline-scan image.
        type: string
        default: "v0.3.3"
      dockerfile_path:
        description: Path to dockerfile used to build image
        type: string
        default: ""
      policy_bundle_file_path:
        description: Specify file path to policy bundle.
        type: string
        default: ""
      policy_failure:
        description: Set to True if pipeline should stop on policy evaluation status 'fail'.
        type: boolean
        default: False
      image_name:
        description: Image repository & tag (eg - "docker.io/anchore/anchore-engine:latest").
        type: string
      timeout:
        description: Timeout used for Anchore Engine image scanning.
        type: string
        default: "300"
    steps:
      - run:
          name: Scan local image.
          command: |
            set -x
            if [[ ! $(which bash) ]]; then
              (set +o pipefail; apk add bash || apt-get install -y bash || yum install -y bash)
            fi
            if [[ ! $(which curl) ]]; then
              (set +o pipefail; apk add curl || apt-get install -y curl || yum install -y curl)
            fi 
            POLICY_FAILURE="<< parameters.policy_failure >>"
            ANCHORE_VERSION="<< parameters.anchore_version >>"
            TIMEOUT="<< parameters.timeout >>"
            POLICY_BUNDLE_PATH="<< parameters.policy_bundle_file_path >>"
            DOCKERFILE_PATH="<< parameters.dockerfile_path >>"
            IMAGE_NAME="<< parameters.image_name >>"
            run_cmd="curl -s https://ci-tools.anchore.io/inline_scan-${ANCHORE_VERSION} | bash -s -- -r -t $TIMEOUT"
            if $POLICY_FAILURE; then
              run_cmd="$run_cmd -f"
            fi
            if [[ ! -z $POLICY_BUNDLE_PATH ]] && [[ -f $POLICY_BUNDLE_PATH ]]; then
              run_cmd="$run_cmd -b $POLICY_BUNDLE_PATH"
            else
              echo "ERROR - could not find policy bundle $POLICY_BUNDLE_PATH - using default policy bundle."
            fi
            if [[ ! -z $DOCKERFILE_PATH ]] && [[ -f $DOCKERFILE_PATH ]]; then
              run_cmd="$run_cmd -d $DOCKERFILE_PATH"
            else
              echo "ERROR - could not find Dockerfile $DOCKERFILE_PATH - Dockerfile not included in scan."
            fi
            run_cmd="$run_cmd $IMAGE_NAME"
            eval "$run_cmd"

  analyze_image:
    description: |
      Add image to anchore engine and start analyzing.
      image_name is required, timeout is optional.
      Must run on executor with anchore_ci_tools.py & anchorecli installed.
    parameters:
      image_name:
        description: Image repository & tag (eg - "docker.io/anchore/anchore-engine:latest").
        type: string
      timeout:
        description: Timeout used for Anchore Engine image scanning.
        type: string
        default: "300"
    steps:
      - run:
          name: Analyze image with anchore engine.
          command: |
            docker exec -it anchore-engine anchore_ci_tools.py --analyze --report --image "<< parameters.image_name >>" --timeout << parameters.timeout >>
            docker exec -it anchore-engine anchore-cli image get "<< parameters.image_name >>"
            docker cp anchore-engine:/anchore-engine/anchore-reports/ ./
  
  install_tools:
    description: Start anchore engine
    steps:
      - run:
          name:
          command: |
            docker run -d --name anchore-engine anchore/inline-scan:v0.3.3 start
      - run:
          name: Wait for anchore engine
          command: docker exec -it anchore-engine anchore_ci_tools.py --wait --timeout 300

  parse_reports:
    description: Prints analysis report of package vulnerabilities using JQ.
    steps:
      - run:
          name: View parsed vulnerability analysis report.
          command: |
            if [[ ! $(which jq) ]]; then
              (set +o pipefail; apk add jq || apt-get install -y jq || yum install -y jq)
            fi
            # docker cp anchore-engine:anchore-engine/anchore-reports/ ./
            printf "\n%s\n" "The following OS packages are installed:"
            jq '[.content | sort_by(.package) | .[] | {package: .package, version: .version}]' anchore-reports/*content-os*.json || true
            printf "\n%s\n" "The following vulnerabilities were found:"
            jq '[.vulnerabilities | group_by(.package) | .[] | {package: .[0].package, vuln: [.[].vuln]}]' anchore-reports/*vuln*.json || true
 
  policy_evaluation:
    description: |
      Perform policy evaluation using Anchore Engine image analysis. A customized policy bundle can be utilized for evaluation.
      Custom policy bundles should be added to your repository at .circleci/.anchore/policy_bundle.json. If using multiple policy
      bundles, or if using executor other than anchore/anchore_engine a custom policy bundle path can be set as a parameter.
    parameters:
      image_name:
        description: Image repository & tag (eg - "docker.io/anchore/anchore-engine:latest").
        type: string
      policy_failure:
        description: Set to True if pipeline should stop on policy evaluation status 'fail'.
        type: boolean
        default: False
      policy_bundle_file_path:
        description: Specify file path to policy bundle.
        type: string
        default: ""
    steps:
      - run:
          name: Evaluate image against desired policy bundle.
          command: |
            set +x
            BUNDLE_PATH="<< parameters.policy_bundle_file_path >>"
            if [[ ! -z "$BUNDLE_PATH" ]] && [[ -f "$BUNDLE_PATH" ]]; then
              docker cp "$BUNDLE_PATH" anchore-engine:/anchore-engine/$(basename "$BUNDLE_PATH")
              (docker exec -i anchore-engine anchore-cli --json policy add "/anchore-engine/$(basename $BUNDLE_PATH)" | jq '.policyId' | xargs anchore-cli policy activate) || \
                printf "\n%s\n" "Failed to activate policy bundle $BUNDLE_PATH - using default policy."
            else
              printf "\n%s\n" "Unable to locate policy bundle $BUNDLE_PATH - using default policy."
            fi
            if << parameters.policy_failure >>; then
              docker exec -i anchore-engine anchore-cli evaluate check "<< parameters.image_name >>" --detail
            else
              (set +o pipefail; docker exec -i anchore-engine anchore-cli evaluate check "<< parameters.image_name >>" --detail | tee /dev/null)
            fi

jobs:
  image_scan:
    executor: anchore_engine
    description: |
      Performs a static security analysis of docker container with anchore engine.
      A custom policy can be used for evaluation, add custom Anchore policy bundle
      to .circleci/.anchore/policy_bundle.json in your repository. Anchore engine pulls
      image from public/private docker registries. Requires registry credentials
      to access private images, use ENV vars $DOCKER_USER & $DOCKER_PASS
    parameters:
      after_checkout:
        description: Optional steps to run after checking out the code.
        type: steps
        default: []
      before_analyze:
        description: Optional steps to run before analyzing the docker image.
        type: steps
        default: []
      after_analyze:
        description: Optional steps to run after analyzing the docker image.
        type: steps
        default: []
      image_name:
        description: Image repository & tag (eg - "docker.io/anchore/anchore-engine:latest").
        type: string
      policy_bundle_file_path:
        description: Specify file path to policy bundle.
        type: string
        default: "/home/circleci/project/.circleci/.anchore/policy_bundle.json"
      policy_failure:
        description: Set to True if pipeline should stop on policy evaluation status 'fail'.
        type: boolean
        default: False
      private_registry:
        description: Set to True if image is only accessible from a private registry.
        type: boolean
        default: False
      registry_name:
        description: Name of private registry (eg - "docker.io")
        type: string
        default: "docker.io"
      registry_user:
        description: Username for private registry (use env var $DOCKER_USER to populate).
        type: string
        default: "${DOCKER_USER}"
      registry_pass:
        description: Password for private registry (use env var $DOCKER_PASS to populate).
        type: string
        default: "${DOCKER_PASS}"
      timeout:
        description: Timeout used for Anchore Engine image scanning.
        type: string
        default: "300"
    steps:
      - setup_remote_docker
      - checkout:
          path: ~/project/src/
      - when:
          name: Run after_checkout life cycle hook steps.
          condition: << parameters.after_checkout >>
          steps: << parameters.after_checkout >>
      - install_tools
      - when:
          name: Run before_analyze life cycle hook steps.
          condition: << parameters.before_analyze >>
          steps: << parameters.before_analyze >>
      - when:
          condition: << parameters.private_registry >>
          steps:
            - add_private_registry:
                registry_name: << parameters.registry_name >>
                registry_user: << parameters.registry_user >>
                registry_pass: << parameters.registry_pass >>
      - analyze_image:
          image_name: << parameters.image_name >>
          timeout: << parameters.timeout >>
      - when:
          name: Run after_analyze life cycle hook steps.
          condition: << parameters.after_analyze >>
          steps: << parameters.after_analyze >>
      - policy_evaluation:
          image_name: << parameters.image_name >>
          policy_failure: << parameters.policy_failure >>
          policy_bundle_file_path: << parameters.policy_bundle_file_path >>
      - parse_reports
      - store_artifacts:
          path: anchore-reports
